// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Formatter should format 1`] = `
"type Foo = int | slice
"
`;

exports[`Formatter should format 2`] = `
"type Foo =
    | SomeVeryLongType
    | OtherLongType
    | AndThirdLongType
"
`;

exports[`Formatter should format 3`] = `
"fun foo() {
    someVeryLongQualifier
        .someLongField();
}
"
`;

exports[`Formatter should format 4`] = `
"fun foo() {
    foo &&
    someVeryLongQualifier
        .someLongField();
}
"
`;

exports[`Formatter should format advanced expressions 1`] = `
"fun test() {
    x += 1;
}
"
`;

exports[`Formatter should format advanced expressions 2`] = `
"fun test() {
    x -= 1;
}
"
`;

exports[`Formatter should format advanced expressions 3`] = `
"fun test() {
    x *= 2;
}
"
`;

exports[`Formatter should format advanced expressions 4`] = `
"fun test() {
    x /= 2;
}
"
`;

exports[`Formatter should format advanced expressions 5`] = `
"fun test() {
    x %= 3;
}
"
`;

exports[`Formatter should format advanced expressions 6`] = `
"fun test() {
    x <<= 2;
}
"
`;

exports[`Formatter should format advanced expressions 7`] = `
"fun test() {
    x >>= 2;
}
"
`;

exports[`Formatter should format advanced expressions 8`] = `
"fun test() {
    x &= mask;
}
"
`;

exports[`Formatter should format advanced expressions 9`] = `
"fun test() {
    x |= flag;
}
"
`;

exports[`Formatter should format advanced expressions 10`] = `
"fun test() {
    x ^= value;
}
"
`;

exports[`Formatter should format advanced expressions 11`] = `
"fun test() {
    veryLongVariableName += veryLongExpressionValue;
}
"
`;

exports[`Formatter should format advanced types 1`] = `
"fun test(callback: int -> string) {
    return;
}
"
`;

exports[`Formatter should format advanced types 2`] = `
"fun test(callback: (int, string) -> bool) {
    return;
}
"
`;

exports[`Formatter should format advanced types 3`] = `
"fun test(callback: VeryLongType -> AnotherLongType) {
    return;
}
"
`;

exports[`Formatter should format annotations 1`] = `
"@annotation
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 2`] = `
"@annotation
@another
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 3`] = `
"@annotation()
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 4`] = `
"@annotation(42)
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 5`] = `
"@annotation(42, , "hello")
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 6`] = `
"@annotation(veryLongArgument)
fun test() {
    return;
}
"
`;

exports[`Formatter should format annotations 7`] = `
"@annotation
global myVar: int
"
`;

exports[`Formatter should format annotations 8`] = `
"@annotation
struct MyStruct {
    x: int
}
"
`;

exports[`Formatter should format annotations 9`] = `
"@annotation // inline comment
struct MyStruct {
    x: int
}
"
`;

exports[`Formatter should format annotations 10`] = `
"@annotation // inline comment 1
@annotation // inline comment 2
@annotation // inline comment 3
@annotation // inline comment 4
struct MyStruct {
    x: int
}
"
`;

exports[`Formatter should format assembly and builtin functions 1`] = `
"fun test()
    asm "PUSH 42"
"
`;

exports[`Formatter should format assembly and builtin functions 2`] = `
"fun test()
    asm "PUSH 42" "ADD"
"
`;

exports[`Formatter should format assembly and builtin functions 3`] = `
"fun test()
    asm "PUSH 42"
"
`;

exports[`Formatter should format assembly and builtin functions 4`] = `
"fun test()
    asm """
        FOO
        BAR
        BAZ
    """
"
`;

exports[`Formatter should format assembly and builtin functions 5`] = `
"fun test()
    builtin
"
`;

exports[`Formatter should format assembly and builtin methods 1`] = `
"fun int.test()
    asm "PUSH 42"
"
`;

exports[`Formatter should format assembly and builtin methods 2`] = `
"fun Foo.test(self)
    asm "PUSH 42" "ADD"
"
`;

exports[`Formatter should format assembly and builtin methods 3`] = `
"fun Bar<Foo>.test(a: int)
    asm "PUSH 42"
"
`;

exports[`Formatter should format assembly and builtin methods 4`] = `
"fun [Baz<int, int>].test()
    builtin
"
`;

exports[`Formatter should format basic types 1`] = `
"type OptionalInt = int?
"
`;

exports[`Formatter should format basic types 2`] = `
"type OptionalString = string?
"
`;

exports[`Formatter should format basic types 3`] = `
"type ParenType = (int)
"
`;

exports[`Formatter should format basic types 4`] = `
"type EmptyTensor = ()
"
`;

exports[`Formatter should format basic types 5`] = `
"type SingleTensor = (int)
"
`;

exports[`Formatter should format basic types 6`] = `
"type DoubleTensor = (int, string)
"
`;

exports[`Formatter should format basic types 7`] = `
"type LongTensor = (
    VeryLongTypeName, AnotherVeryLongTypeName, ThirdLongTypeName
)
"
`;

exports[`Formatter should format basic types 8`] = `
"type EmptyTuple = []
"
`;

exports[`Formatter should format basic types 9`] = `
"type SingleTuple = [int]
"
`;

exports[`Formatter should format basic types 10`] = `
"type DoubleTuple = [int, string]
"
`;

exports[`Formatter should format basic types 11`] = `
"type LongTuple = [
    VeryLongTypeName, AnotherVeryLongTypeName, ThirdLongTypeName
]
"
`;

exports[`Formatter should format binary expressions with comments 1`] = `
"fun foo() {
    10 + // comment
    20;
}
"
`;

exports[`Formatter should format binary expressions with comments 2`] = `
"fun foo() {
    10 + // comment
    20;
}
"
`;

exports[`Formatter should format binary expressions with comments 3`] = `
"fun foo() {
    foo + // comment 2
    true;
}
"
`;

exports[`Formatter should format binary expressions with comments 4`] = `
"fun foo() {
    10 +
    // other number here
    // and comment
    20;
}
"
`;

exports[`Formatter should format binary expressions with comments 5`] = `
"fun foo() {
    10 +
    // other number here
    // and comment
    foo;
}
"
`;

exports[`Formatter should format binary expressions with comments 6`] = `
"fun foo() {
    10 +
    // other number here
    // and comment
    true;
}
"
`;

exports[`Formatter should format binary expressions with comments 7`] = `
"fun foo() {
    10 +
    // other number here
    // and comment
    null;
}
"
`;

exports[`Formatter should format binary expressions with comments 8`] = `
"fun foo() {
    20 + // comment
    30; // comment here
}
"
`;

exports[`Formatter should format binary expressions with comments 9`] = `
"fun foo() {
    20 + 30; // comment here
}
"
`;

exports[`Formatter should format binary expressions with comments 10`] = `
"fun foo() {
    assert (
        in.valueCoins >
        msg.forwardTonAmount +
        // 3 messages: wal1->wal2,  wal2->owner, wal2->response
        // but last one is optional (it is ok if it fails)
        forwardedMessagesCount *
        in.originalForwardFee +
        (2 * JETTON_WALLET_GAS_CONSUMPTION + MIN_TONS_FOR_STORAGE)
    ) throw ERR_NOT_ENOUGH_TON;
}
"
`;

exports[`Formatter should format binary expressions with comments 11`] = `
"fun foo() {
    assert (
        msgValue >
        forwardTonAmount +
        // 3 messages: wal1->wal2,  wal2->owner, wal2->response
        // but last one is optional (it is ok if it fails)
        fwdCount *
        fwdFee +
        forwardInitStateOverhead() + // additional fwd fees related to initstate in iternal_transfer
        calculateGasFee(MY_WORKCHAIN, sendTransferGasConsumption) +
        calculateGasFee(MY_WORKCHAIN, receiveTransferGasConsumption) +
        calculateJettonWalletMinStorageFee()
    ) throw ERROR_NOT_ENOUGH_GAS;
}
"
`;

exports[`Formatter should format block statements 1`] = `
"fun test() {
    val a = 100;
    a = 200;
}
"
`;

exports[`Formatter should format block statements 2`] = `
"fun test() {
    val a = 100;

    a = 200;
}
"
`;

exports[`Formatter should format block statements 3`] = `
"fun test() {
    val a = 100;

    a = 200;
}
"
`;

exports[`Formatter should format block statements 4`] = `
"fun test() {
    // comment here
    val a = 100;
    // and there
    a = 200;
}
"
`;

exports[`Formatter should format block statements 5`] = `
"fun test() {
    val a = 100;
    // comment here
    a = 200;
}
"
`;

exports[`Formatter should format block with only comment 1`] = `
"fun foo() {
    match (a) {
        TopUpTons => {
            // just accept tons
        }
    }
}
"
`;

exports[`Formatter should format block with only comment 2`] = `
"fun foo() {
    match (a) {
        TopUpTons => {
            // just accept tons
        }

        else => throw 0xFFFF,
    }
}
"
`;

exports[`Formatter should format block with only comment 3`] = `
"fun foo() {
    // to do: implement this function
}
"
`;

exports[`Formatter should format call expression with comments 1`] = `
"fun foo() {
    bar(/* init: */true);
}
"
`;

exports[`Formatter should format call expression with comments 2`] = `
"fun foo() {
    bar(/* init: */true, /* other: */false);
}
"
`;

exports[`Formatter should format call expression with comments 3`] = `
"fun foo() {
    bar(/* init: */true, /* other: */false /* other after */);
}
"
`;

exports[`Formatter should format call expression with comments 4`] = `
"fun foo() {
    bar(
        /* init: */toooooooooooLooooooooooooooooooooooooooooooooooooooong,
        /* other: */toooooooooooLooooooooooooooooooooooooooooooooooooooong /* other after */
    );
}
"
`;

exports[`Formatter should format chain with comments 1`] = `
"fun foo() {
    foo() // comment
        .bar;
}
"
`;

exports[`Formatter should format chain with comments 2`] = `
"fun foo() {
    foo()
        // comment
        .bar;
}
"
`;

exports[`Formatter should format chain with comments 3`] = `
"fun foo() {
    foo
        .baz // comment
        .bar;
}
"
`;

exports[`Formatter should format chain with comments 4`] = `
"fun foo() {
    foo() // comment
        .bar();
}
"
`;

exports[`Formatter should format conditions 1`] = `
"fun test() {
    if (true) {
        a = 100;
    }
}
"
`;

exports[`Formatter should format conditions 2`] = `
"fun test() {
    if (
        foo.someLongField +
        someLongVariable
    ) {
        a = 100;
    }
}
"
`;

exports[`Formatter should format conditions 3`] = `
"fun test() {
    if (true) {
        a = 100;
    } else {
        a = 200;
    }
}
"
`;

exports[`Formatter should format conditions 4`] = `
"fun test() {
    if (true) {
        a = 100;
    } else if (false) {
        a = 200;
    }
}
"
`;

exports[`Formatter should format conditions 5`] = `
"fun test() {
    if (true) {
        a = 100;
    } else if (false) {
        a = 200;
    } else {
        a = 300;
    }
}
"
`;

exports[`Formatter should format control flow statements 1`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format control flow statements 2`] = `
"fun test() {
    return 42;
}
"
`;

exports[`Formatter should format control flow statements 3`] = `
"fun test() {
    return someVeryLongExpression;
}
"
`;

exports[`Formatter should format control flow statements 4`] = `
"fun test() {
    return (self.minBid < MIN_TONS_FOR_STORAGE + MINTING_PRICE_UPPER_BOUND) |
    ((self.maxBid != 0) & (self.maxBid < self.minBid)) |
    (self.minBidStep <= 0) |
    (self.minExtendTime > 60 * 60 * 24 * 7) |
    (self.duration > 60 * 60 * 24 * 365);
}
"
`;

exports[`Formatter should format control flow statements 5`] = `
"fun test() {
    return {
        foo: bar,
        bar: baz,
        bar: baz,
        bar: baz,
        bar: baz,
    };
}
"
`;

exports[`Formatter should format control flow statements 6`] = `
"fun test() {
    while (true) {
        break
    }
}
"
`;

exports[`Formatter should format control flow statements 7`] = `
"fun test() {
    while (true) {
        continue
    }
}
"
`;

exports[`Formatter should format control flow statements 8`] = `
"fun test() {
    throw 42
}
"
`;

exports[`Formatter should format control flow statements 9`] = `
"fun test() {
    throw (1, 2)
}
"
`;

exports[`Formatter should format control flow statements 10`] = `
"fun test() {
    throw someVeryLongExpression
}
"
`;

exports[`Formatter should format error handling 1`] = `
"fun test() {
    assert (true) throw 1;
}
"
`;

exports[`Formatter should format error handling 2`] = `
"fun test() {
    assert(condition, 42);
}
"
`;

exports[`Formatter should format error handling 3`] = `
"fun test() {
    assert (
        veryLongCondition
    ) throw veryLongException;
}
"
`;

exports[`Formatter should format error handling 4`] = `
"fun test() {
    assert (
        in.valueCoins >
        msg.forwardTonAmount +
        // 3 messages: wal1->wal2,  wal2->owner, wal2->response
        // but last one is optional (it is ok if it fails)
        forwardedMessagesCount *
        in.originalForwardFee +
        (2 * JETTON_WALLET_GAS_CONSUMPTION + MIN_TONS_FOR_STORAGE)
    ) throw ERR_NOT_ENOUGH_TON;
}
"
`;

exports[`Formatter should format error handling 5`] = `
"fun test() {
    try {
        doSomething();
    } catch {
        handleError();
    }
}
"
`;

exports[`Formatter should format error handling 6`] = `
"fun test() {
    try {
        doSomething();
    } catch (e) {
        handleError(e);
    }
}
"
`;

exports[`Formatter should format error handling 7`] = `
"fun test() {
    try {
        doSomething();
    } catch (e, code) {
        handleError(e, code);
    }
}
"
`;

exports[`Formatter should format function calls 1`] = `
"fun test() {
    foo();
}
"
`;

exports[`Formatter should format function calls 2`] = `
"fun test() {
    veryLongFunctionName();
}
"
`;

exports[`Formatter should format function calls 3`] = `
"fun test() {
    foo(42);
}
"
`;

exports[`Formatter should format function calls 4`] = `
"fun test() {
    foo(1, 2);
}
"
`;

exports[`Formatter should format function calls 5`] = `
"fun test() {
    foo(1, 2, 3);
}
"
`;

exports[`Formatter should format function calls 6`] = `
"fun test() {
    notifyMinterMsg.send(SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE |
    SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}
"
`;

exports[`Formatter should format function calls 7`] = `
"fun test() {
    foo(
        veryLongArgument,
        anotherVeryLongArgument,
        thirdLongArgument
    );
}
"
`;

exports[`Formatter should format function calls 8`] = `
"fun test() {
    foo(mutate x);
}
"
`;

exports[`Formatter should format function calls 9`] = `
"fun test() {
    foo(x, mutate y);
}
"
`;

exports[`Formatter should format function calls 10`] = `
"fun test() {
    foo().bar();
}
"
`;

exports[`Formatter should format function calls 11`] = `
"fun test() {
    foo(x).bar(y);
}
"
`;

exports[`Formatter should format functions 1`] = `
"fun test() {
    return 42;
}
"
`;

exports[`Formatter should format functions 2`] = `
"fun test(x: int) {
    return x;
}
"
`;

exports[`Formatter should format functions 3`] = `
"fun test(x: int, y: string) {
    return x;
}
"
`;

exports[`Formatter should format functions 4`] = `
"fun test(x: int, y: string, z: bool) {
    return x;
}
"
`;

exports[`Formatter should format functions 5`] = `
"fun test(x: int = 42) {
    return x;
}
"
`;

exports[`Formatter should format functions 6`] = `
"fun test(x: int, y: string = "hello") {
    return x;
}
"
`;

exports[`Formatter should format functions 7`] = `
"fun test(mutate x: int) {
    return x;
}
"
`;

exports[`Formatter should format functions 8`] = `
"fun test(x: int, mutate y: string) {
    return x;
}
"
`;

exports[`Formatter should format functions 9`] = `
"fun test(): int {
    return 42;
}
"
`;

exports[`Formatter should format functions 10`] = `
"fun test(x: int): string {
    return "hello";
}
"
`;

exports[`Formatter should format functions 11`] = `
"fun test(
    veryLongParameterName: VeryLongTypeName,
    anotherLongParameter: AnotherLongType,
): ReturnType {
    return value;
}
"
`;

exports[`Formatter should format functions 12`] = `
"fun MyType.test() {
    return;
}
"
`;

exports[`Formatter should format functions 13`] = `
"fun MyType.test(x: int): string {
    return "hello";
}
"
`;

exports[`Formatter should format functions 14`] = `
"fun MyType.test(self, x: int): string {
    return "hello";
}
"
`;

exports[`Formatter should format functions 15`] = `
"get fun test() {
    return 42;
}
"
`;

exports[`Formatter should format functions 16`] = `
"get fun test(): int {
    return 42;
}
"
`;

exports[`Formatter should format functions with many parameters 1`] = `
"fun deployNftItem(
    itemIndex: int,
    nftItemCode: cell,
    attachTonAmount: coins,
    initParams: Cell<NftItemInitAtDeployment>,
) {}

"
`;

exports[`Formatter should format generics 1`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format generics 2`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format generics 3`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format generics 4`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format generics 5`] = `
"fun test() {
    return;
}
"
`;

exports[`Formatter should format generics 6`] = `
"fun test() {
    val x: List<int>;
}
"
`;

exports[`Formatter should format generics 7`] = `
"fun test() {
    val x: Map<string, int>;
}
"
`;

exports[`Formatter should format generics 8`] = `
"fun test() {
    val x = Foo<int32, int32>.new();
}
"
`;

exports[`Formatter should format generics 9`] = `
"fun test() {
    val x: VeryLongType<VeryLongGenericParameter>;
}
"
`;

exports[`Formatter should format generics 10`] = `
"struct MyStruct<T> {
    value: T
}
"
`;

exports[`Formatter should format generics 11`] = `
"struct MyStruct<T, U> {
    first: T
    second: U
}
"
`;

exports[`Formatter should format imports with comments 1`] = `
"import "a" // comment after
"
`;

exports[`Formatter should format imports with comments 2`] = `
"// comment before
import "a"
"
`;

exports[`Formatter should format imports with comments 3`] = `
"import "a"
"
`;

exports[`Formatter should format imports with comments 4`] = `
"import "a"
// comment between
import "b"
"
`;

exports[`Formatter should format loops 1`] = `
"fun test() {
    while (true) {
        break
    }
}
"
`;

exports[`Formatter should format loops 2`] = `
"fun test() {
    while (condition) {
        doSomething();
    }
}
"
`;

exports[`Formatter should format loops 3`] = `
"fun test() {
    while (
        veryVeryLongCondition
    ) {
        doSomething();
    }
}
"
`;

exports[`Formatter should format loops 4`] = `
"fun test() {
    do {
        doSomething();
    } while (true);
}
"
`;

exports[`Formatter should format loops 5`] = `
"fun test() {
    do {
        doSomething();
    } while (condition);
}
"
`;

exports[`Formatter should format loops 6`] = `
"fun test() {
    do {
        doSomething();
    } while (
        veryLongCondition
    );
}
"
`;

exports[`Formatter should format loops 7`] = `
"fun test() {
    repeat (10) {
        doSomething();
    }
}
"
`;

exports[`Formatter should format loops 8`] = `
"fun test() {
    repeat (count) {
        doSomething();
    }
}
"
`;

exports[`Formatter should format loops 9`] = `
"fun test() {
    repeat (veryLongCount) {
        doSomething();
    }
}
"
`;

exports[`Formatter should format misc constructs 1`] = `
"fun test() {
    x.0;
}
"
`;

exports[`Formatter should format misc constructs 2`] = `
"fun test() {
    x.42;
}
"
`;

exports[`Formatter should format misc constructs 3`] = `
"fun test() {
    getValue().0;
}
"
`;

exports[`Formatter should format object literal field with comments 1`] = `
"fun foo() {
    {
        foo: 10, // comment
    };
}
"
`;

exports[`Formatter should format object literal field with comments 2`] = `
"fun foo() {
    {
        foo: 10, /* comment */
    };
}
"
`;

exports[`Formatter should format object literal field with comments 3`] = `
"fun foo() {
    {
        foo:, // comment
    };
}
"
`;

exports[`Formatter should format object literal field with comments 4`] = `
"fun foo() {
    {
        foo:, /* comment */
    };
}
"
`;

exports[`Formatter should format object literal field with comments 5`] = `
"fun foo() {
    {
        foo, // comment
    };
}
"
`;

exports[`Formatter should format object literal field with comments 6`] = `
"fun foo() {
    {
        foo, /* comment */
    };
}
"
`;

exports[`Formatter should format object literals 1`] = `
"fun test() {
    {}
    ;
}
"
`;

exports[`Formatter should format object literals 2`] = `
"fun test() {
    { foo: 1 };
}
"
`;

exports[`Formatter should format object literals 3`] = `
"fun test() {
    { foo: 1, bar: 2 };
}
"
`;

exports[`Formatter should format object literals 4`] = `
"fun test() {
    {
        foo: 1,
        bar: 2,
        baz: 3,
    };
}
"
`;

exports[`Formatter should format object literals 5`] = `
"fun test() {
    MyType { foo: 1 };
}
"
`;

exports[`Formatter should format object literals 6`] = `
"fun test() {
    MyType { foo: 1, bar: 2 };
}
"
`;

exports[`Formatter should format object literals 7`] = `
"fun test() {
    {
        veryLongFieldName: veryLongValue,
        anotherLongField: anotherLongValue,
    };
}
"
`;

exports[`Formatter should format object literals 8`] = `
"fun test() {
    {
        foo;
    }
    ;
}
"
`;

exports[`Formatter should format object literals 9`] = `
"fun test() {
    { foo: };
}
"
`;

exports[`Formatter should format object literals 10`] = `
"fun test() {
    {
        foo: 1,
        bar:,
        baz,
    };
}
"
`;

exports[`Formatter should format object literals 11`] = `
"fun test() {
    { foo: { bar: 1 } };
}
"
`;

exports[`Formatter should format object literals 12`] = `
"fun test() {
    Foo {
        // some comment
        // with several lines
        foo: bar,
    };
}
"
`;

exports[`Formatter should format object literals 13`] = `
"fun test() {
    Foo {
        // some comment
        // with several lines
        foo,
    };
}
"
`;

exports[`Formatter should format object literals 14`] = `
"fun test() {
    val emptyNftItemStorage: ItemStorageNotInitialized = {
        config: ItemConfig { index, collectionAddress }.toCell(),
    };
}
"
`;

exports[`Formatter should format object literals 15`] = `
"fun test() {
    val emptyNftItemStorage: ItemStorageNotInitialized = {
        config: ItemConfig { toooooooooooooooooooooooooooooooooooooooooooLong, collectionAddress }
            .toCell(),
    };
}
"
`;

exports[`Formatter should format object literals 16`] = `
"fun test() {
    val emptyNftItemStorage: ItemStorageNotInitialized = {
        config: ItemConfig {
            toooooooooooooooooooooooooooooooooooooooooooLong,
            toooooooooooooooooooooooooooooooooooooooooooLong2,
        }
            .toCell(),
    };
}
"
`;

exports[`Formatter should format operators 1`] = `
"fun test() {
    42 as int;
}
"
`;

exports[`Formatter should format operators 2`] = `
"fun test() {
    someValue as SomeType;
}
"
`;

exports[`Formatter should format operators 3`] = `
"fun test() {
    x is int;
}
"
`;

exports[`Formatter should format operators 4`] = `
"fun test() {
    x !is int;
}
"
`;

exports[`Formatter should format operators 5`] = `
"fun test() {
    x!;
}
"
`;

exports[`Formatter should format operators 6`] = `
"fun test() {
    getValue()!;
}
"
`;

exports[`Formatter should format operators 7`] = `
"fun test() {
    lazy expr;
}
"
`;

exports[`Formatter should format operators 8`] = `
"fun test() {
    lazy veryLongExpression;
}
"
`;

exports[`Formatter should format operators 9`] = `
"fun test() {
    true ? 1 : 2;
}
"
`;

exports[`Formatter should format operators 10`] = `
"fun test() {
    condition
         ? veryLongConsequence
         : veryLongAlternative;
}
"
`;

exports[`Formatter should format operators 11`] = `
"fun test() {
    condition
         ? condition1
             ? veryLongConsequence1
             : veryLongAlternative1
         : condition2
             ? veryLongConsequence2
             : veryLongAlternative2;
}
"
`;

exports[`Formatter should format pattern matching 1`] = `
"fun test() {
    match (value) {}
}
"
`;

exports[`Formatter should format pattern matching 2`] = `
"fun test() {
    match (value) {
        int => 1,
        string => 2,
    }
}
"
`;

exports[`Formatter should format pattern matching 3`] = `
"fun test() {
    match (value) {
        42 => "number",
        "hello" => "string",
        else => "other",
    }
}
"
`;

exports[`Formatter should format pattern matching 4`] = `
"fun test() {
    match (value) {
        42 => "number",

        "hello" => "string",

        else => "other",
    }
}
"
`;

exports[`Formatter should format pattern matching 5`] = `
"fun test() {
    match (value) {
        int => {
            return 1;
        }
        string => {
            return 2;
        }
    }
}
"
`;

exports[`Formatter should format pattern matching 6`] = `
"fun test() {
    match (value) {
        int => return 1;,
        string => throw 2,
    }
}
"
`;

exports[`Formatter should format simple expressions 1`] = `
"fun test() {
    x = 42;
}
"
`;

exports[`Formatter should format simple expressions 2`] = `
"fun test() {
    veryLongVariableName = veryLongExpressionValue;
}
"
`;

exports[`Formatter should format simple expressions 3`] = `
"fun test() {
    a = loooooooooooooooooooooooooooooooooooooooooooooong +
    10;
}
"
`;

exports[`Formatter should format simple expressions 4`] = `
"fun test() {
    a = {
        a: 1,
        a: 1,
        a: 1,
        a: 1,
        a: 1,
    };
}
"
`;

exports[`Formatter should format simple expressions 5`] = `
"fun test() {
    !true;
}
"
`;

exports[`Formatter should format simple expressions 6`] = `
"fun test() {
    ~42;
}
"
`;

exports[`Formatter should format simple expressions 7`] = `
"fun test() {
    -42;
}
"
`;

exports[`Formatter should format simple expressions 8`] = `
"fun test() {
    +42;
}
"
`;

exports[`Formatter should format simple expressions 9`] = `
"fun test() {
    (42);
}
"
`;

exports[`Formatter should format simple expressions 10`] = `
"fun test() {
    (veryLongExpression);
}
"
`;

exports[`Formatter should format simple expressions 11`] = `
"fun test() {
    ();
}
"
`;

exports[`Formatter should format simple expressions 12`] = `
"fun test() {
    (42);
}
"
`;

exports[`Formatter should format simple expressions 13`] = `
"fun test() {
    (1, 2);
}
"
`;

exports[`Formatter should format simple expressions 14`] = `
"fun test() {
    (
        veryLongExpression, anotherVeryLongExpression, thirdLongExpression
    );
}
"
`;

exports[`Formatter should format simple expressions 15`] = `
"fun test() {
    [];
}
"
`;

exports[`Formatter should format simple expressions 16`] = `
"fun test() {
    [42];
}
"
`;

exports[`Formatter should format simple expressions 17`] = `
"fun test() {
    [1, 2];
}
"
`;

exports[`Formatter should format simple expressions 18`] = `
"fun test() {
    [
        veryLongExpression, anotherVeryLongExpression, thirdLongExpression
    ];
}
"
`;

exports[`Formatter should format simple literals 1`] = `
"const msg = "hello world"
"
`;

exports[`Formatter should format simple literals 2`] = `
"fun test() {
    "hello world";
}
"
`;

exports[`Formatter should format simple literals 3`] = `
"const flag = true
"
`;

exports[`Formatter should format simple literals 4`] = `
"const flag = false
"
`;

exports[`Formatter should format simple literals 5`] = `
"fun test() {
    true;
}
"
`;

exports[`Formatter should format simple literals 6`] = `
"const value = null
"
`;

exports[`Formatter should format simple literals 7`] = `
"fun test() {
    null;
}
"
`;

exports[`Formatter should format simple literals 8`] = `
"fun test() {
    _;
}
"
`;

exports[`Formatter should format struct with comments 1`] = `
"struct Foo {
    // value doc
    value: int
}
"
`;

exports[`Formatter should format struct with comments 2`] = `
"struct Foo {
    // value doc
    value: int // inline doc
}
"
`;

exports[`Formatter should format struct with comments 3`] = `
"struct Foo {
    // value doc
    // with several lines
    value: int /* wtf */ /* idk */
}
"
`;

exports[`Formatter should format struct with comments 4`] = `
"struct Foo {
    value: int
}
"
`;

exports[`Formatter should format struct with comments 5`] = `
"struct Foo {
    // value doc
    value: int // inline doc
    // after doc
    other: int // inline doc 2
}
"
`;

exports[`Formatter should format top level declarations 1`] = `
"fun foo() {}

fun test() {}
"
`;

exports[`Formatter should format top level declarations 2`] = `
"fun foo() {}
fun test() {}
"
`;

exports[`Formatter should format top level declarations 3`] = `
"fun foo() {}

fun test() {}
"
`;

exports[`Formatter should format top level declarations with annotations 1`] = `
"/// function comment
/// second line
@deprecated("aaaa")
@inline
fun foo() {}
"
`;

exports[`Formatter should format top level declarations with annotations 2`] = `
"/// method comment
/// second line
@deprecated("aaaa")
@inline
fun Foo.foo() {}
"
`;

exports[`Formatter should format top level declarations with annotations 3`] = `
"/// method comment
/// second line
@deprecated("aaaa")
@inline
get fun foo() {}
"
`;

exports[`Formatter should format top level declarations with annotations 4`] = `
"/// struct comment
/// second line
@deprecated("aaaa")
@inline
@custom({ foo: 10 })
struct Foo {}
"
`;

exports[`Formatter should format top level declarations with annotations 5`] = `
"/// type alias comment
/// second line
@deprecated("aaaa")
@inline
type Foo = int
"
`;

exports[`Formatter should format top level declarations with annotations 6`] = `
"/// constant comment
/// second line
@deprecated("aaaa")
@inline
const FOO = 100
"
`;

exports[`Formatter should format top level declarations with annotations 7`] = `
"/// global variable comment
/// second line
@deprecated("aaaa")
@inline
global foo: int
"
`;

exports[`Formatter should format top level declarations with comments 1`] = `
"/// function comment
/// second line
fun foo() {}
"
`;

exports[`Formatter should format top level declarations with comments 2`] = `
"/// method comment
/// second line
fun Foo.foo() {}
"
`;

exports[`Formatter should format top level declarations with comments 3`] = `
"/// method comment
/// second line
get fun foo() {}
"
`;

exports[`Formatter should format top level declarations with comments 4`] = `
"/// struct comment
/// second line
struct Foo {}
"
`;

exports[`Formatter should format top level declarations with comments 5`] = `
"/// type alias comment
/// second line
type Foo = int
"
`;

exports[`Formatter should format top level declarations with comments 6`] = `
"/// constant comment
/// second line
const FOO = 100
"
`;

exports[`Formatter should format top level declarations with comments 7`] = `
"/// global variable comment
/// second line
global foo: int
"
`;

exports[`Formatter should format top-level declarations 1`] = `
"tolk 0.6
"
`;

exports[`Formatter should format top-level declarations 2`] = `
"tolk 0.6.0
"
`;

exports[`Formatter should format top-level declarations 3`] = `
"import "file.tolk"
"
`;

exports[`Formatter should format top-level declarations 4`] = `
"import "very/long/path/to/file.tolk"
"
`;

exports[`Formatter should format top-level declarations 5`] = `
"global myVar: int
"
`;

exports[`Formatter should format top-level declarations 6`] = `
"global myVar: VeryLongTypeName
"
`;

exports[`Formatter should format top-level declarations 7`] = `
"fun test() {
    ;
}
"
`;

exports[`Formatter should format top-level declarations 8`] = `
"fun test() {
    doSomething();
    ;
}
"
`;

exports[`Formatter should format top-level declarations 9`] = `
"struct MyStruct {}
"
`;

exports[`Formatter should format top-level declarations 10`] = `
"struct MyStruct {
    x: int
}
"
`;

exports[`Formatter should format top-level declarations 11`] = `
"struct MyStruct {
    x: int
    y: string
}
"
`;

exports[`Formatter should format top-level declarations 12`] = `
"struct MyStruct {
    x: int = 42
    y: string = "hello"
}
"
`;

exports[`Formatter should format top-level declarations 13`] = `
"struct (8) MyStruct {
    x: int
}
"
`;

exports[`Formatter should format unary expressions with comments 1`] = `
"fun foo() {
    !true; // comment here
}
"
`;

exports[`Formatter should format unary expressions with comments 2`] = `
"fun foo() {
    !// comment here
    true;
}
"
`;

exports[`Formatter should format unary expressions with comments 3`] = `
"fun foo() {
    // comment here
    !true;
}
"
`;

exports[`Formatter should format unary expressions with comments 4`] = `
"fun foo() {
    !true;// comment here
}
"
`;

exports[`Formatter should format variables 1`] = `
"fun test() {
    var x;
}
"
`;

exports[`Formatter should format variables 2`] = `
"fun test() {
    val x;
}
"
`;

exports[`Formatter should format variables 3`] = `
"fun test() {
    var x = 42;
}
"
`;

exports[`Formatter should format variables 4`] = `
"fun test() {
    val x = 42;
}
"
`;

exports[`Formatter should format variables 5`] = `
"fun test() {
    var x: int;
}
"
`;

exports[`Formatter should format variables 6`] = `
"fun test() {
    val x: int = 42;
}
"
`;

exports[`Formatter should format variables 7`] = `
"fun test() {
    var x redef;
}
"
`;

exports[`Formatter should format variables 8`] = `
"fun test() {
    var [x, y] = getTuple();
}
"
`;

exports[`Formatter should format variables 9`] = `
"fun test() {
    val [x: int, y: string] = getTuple();
}
"
`;

exports[`Formatter should format variables 10`] = `
"fun test() {
    var [
        veryLongVariableName, anotherVeryLongVariableName
    ] = getTuple();
}
"
`;

exports[`Formatter should format variables 11`] = `
"fun test() {
    var (x, y) = getTensor();
}
"
`;

exports[`Formatter should format variables 12`] = `
"fun test() {
    val (x: int, y: string) = getTensor();
}
"
`;

exports[`Formatter should format variables 13`] = `
"fun test() {
    var (
        veryLongVariableName, anotherVeryLongVariableName
    ) = getTensor();
}
"
`;
