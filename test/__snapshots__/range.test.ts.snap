// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Range Formatter should format multiple selected lines 1`] = `
"fun foo() {
    val x = 1;
    val y = 2;
    val   z   =   3;
}
"
`;

exports[`Range Formatter should format only selected function signature 1`] = `
"fun foo() {
    val   x   =   1;
    val   y   =   2;
    val   z   =   3;
}
"
`;

exports[`Range Formatter should format only selected variable declaration 1`] = `
"fun foo() {
    val   x   =   1;
    val y = 2;
    val   z   =   3;
}
"
`;

exports[`Range Formatter should format selected expression 1`] = `
"fun foo() {
    val x = someVeryLongQualifier
        .someLongField();
    val y    =      2;
}
"
`;

exports[`Range Formatter should format selected function call with long arguments 1`] = `
"fun foo() {
    val x =     1;
    bar(
        veryLongArgument1,
        veryLongArgument2,
        veryLongArgument3
    );
    val y = 2;
}
"
`;

exports[`Range Formatter should format selected function call with long arguments 2 1`] = `
"fun onBouncedMessage(in: InMessageBounced) {
    in.bouncedBody
        .skipBouncedPrefix();

    val msg = lazy BounceOpToHandle.fromSlice(in.bouncedBody);
}
"
`;

exports[`Range Formatter should format selected struct definition 1`] = `
"type MyType    =   int

struct MyStruct {
    field1: int
    field2: string
}

fun foo() {
    val x = 1;
}
"
`;

exports[`Range Formatter should format selected struct definition and function with comment after it 1`] = `
"struct MyStruct {
    field1: int;
    field2: string;
}

// comment
fun foo() {
    val x = 1;
}
"
`;
